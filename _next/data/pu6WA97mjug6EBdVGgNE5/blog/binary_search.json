{"pageProps":{"frontMatter":{"title":"Binary Search","date":"Mon 28 Dec 2021","excerpt":"In this post we will look at the implementation of the different variations of binary search, which can be used to solve almost all the coding problems around this.","cover_image":"/images/posts/binary.png"},"slug":"binary_search","content":" \n\n## Binary Search  - Different variations\n\n```cpp\n// return index of first element >= target\nint lower_bound(vector<int> v, int target){\n    int l = 0;\n    int r = v.size();\n    while(l < r) {\n        int m = l+(r-l)/2;\n        v[m] < target ? l = m+1 : r = m;\n    }\n    return l;\n}\n```\n```cpp\n// return index of first element > target\nint upper_bound(vector<int> v, int target){\n    int l = 0;\n    int r = v.size();\n    while(l < r) {\n        int m = l+(r-l)/2;\n        v[m] <= target ? l = m+1 : r = m;\n    }\n    return l;\n}\n```\n```cpp\n// return index of element == target\nint binary_search(vector<int> v, int target){\n    int l = 0;\n    int r = v.size();\n    while(l < r) {\n        int m = l+(r-l)/2;\n        v[m] < target ? l = m+1 : r = m;\n    }\n    return l < v.size() && v[l] == target ? l : -1;\n}\n```\n```cpp\nint main()\n{\n    vector<int> v = {1,1,2,4,5,5,5,6,6,8,9};\n    cout<< lower_bound(v, 5);  // 4\n    cout<< upper_bound(v, 5);  // 7\n    return 0;\n}\n```","url":"https://subhashjha.in/blog/binary_search"},"__N_SSG":true}